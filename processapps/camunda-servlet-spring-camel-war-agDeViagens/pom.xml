<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>br.usp.sin5009</groupId>
	<artifactId>camunda-servlet-spring-camel-war-agDeViagens</artifactId>
	<version>1.0-SNAPSHOT</version>

	<packaging>war</packaging>

	<name>Camunda BPM Process Application</name>
	<description>A Process Application for [Camunda BPM](http://docs.camunda.org). [The project has been generated by the Maven archetype 'camunda-archetype-servlet-spring-camel-war-7.7.2']</description>

	<properties>

	  <camunda.version>7.7.0</camunda.version>
          <!--
          <camel.version>2.15.2</camel.version>
          -->
          <camel.version>2.24.2</camel.version>
          
                <spring.version>5.2.0.RELEASE</spring.version>
                
		<spring.version>4.0.7.RELEASE</spring.version>
		<sl4j.version>1.7.7</sl4j.version>
		<maven.compiler.source>1.6</maven.compiler.source>
		<maven.compiler.target>1.6</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<failOnMissingWebXml>false</failOnMissingWebXml>

                <tomcat-instance-hostname>ipDaMaqNaNuvem</tomcat-instance-hostname>
		<tomcat-instance-servlet-port>porta</tomcat-instance-servlet-port>
                <tomcat-instance-username>usuarioDoTomcat</tomcat-instance-username>
		<tomcat-instance-password>senha</tomcat-instance-password>
                <version.cargo.plugin>1.6.5</version.cargo.plugin>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.camunda.bpm</groupId>
				<artifactId>camunda-bom</artifactId>
				<version>${camunda.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.camunda.bpm.dmn</groupId>
				<artifactId>camunda-engine-dmn-bom</artifactId>
				<version>${camunda.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<!-- process engine, needs to be provided -->
			<groupId>org.camunda.bpm</groupId>
			<artifactId>camunda-engine</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<artifactId>spring-beans</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- decision engine -->
			<groupId>org.camunda.bpm.dmn</groupId>
			<artifactId>camunda-engine-dmn</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<!-- AssertJ Testing Library -->
			<groupId>org.camunda.bpm.extension</groupId>
			<artifactId>camunda-bpm-assert</artifactId>
			<version>1.2</version>
			<scope>test</scope>
		</dependency>

		<!-- Required to use Spin dataformat support in unit tests -->
		<dependency>
			<groupId>org.camunda.spin</groupId>
			<artifactId>camunda-spin-dataformat-all</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.camunda.bpm</groupId>
			<artifactId>camunda-engine-plugin-spin</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Required to use Connectors in unit tests -->
		<dependency>
			<groupId>org.camunda.connect</groupId>
			<artifactId>camunda-connect-connectors-all</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.camunda.bpm</groupId>
			<artifactId>camunda-engine-plugin-connect</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Required to use Templates in unit tests -->
		<dependency>
			<groupId>org.camunda.template-engines</groupId>
			<artifactId>camunda-template-engines-freemarker</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.camunda.template-engines</groupId>
			<artifactId>camunda-template-engines-velocity</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<!-- Needed for InMemoryH2Test -->
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.0.206</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<!-- Used to generate test coverage reports, see https://github.com/camunda/camunda-consulting/tree/master/snippets/camunda-bpm-process-test-coverage -->
			<groupId>org.camunda.bpm.extension</groupId>
			<artifactId>camunda-bpm-process-test-coverage</artifactId>
			<version>0.3.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.camunda.bpm</groupId>
			<artifactId>camunda-engine-spring</artifactId>
			<exclusions>
				<exclusion>
					<artifactId>spring-beans</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
				<exclusion>
					<artifactId>spring-jdbc</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
				<exclusion>
					<artifactId>spring-tx</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
				<exclusion>
					<artifactId>spring-orm</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
				<exclusion>
					<artifactId>spring-context</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.camunda.bpm.extension.camel</groupId>
			<artifactId>camunda-bpm-camel-spring</artifactId>
			<version>0.4</version>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring</artifactId>
			<version>${camel.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>spring-tx</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
				<exclusion>
					<artifactId>spring-context</artifactId>
					<groupId>org.springframework</groupId>
				</exclusion>
			</exclusions>
		</dependency>

                  
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${sl4j.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<!-- apache commons logging => slf4j -->
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${sl4j.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${sl4j.version}</version>
			<scope>test</scope>
		</dependency>


<!-- https://mvnrepository.com/artifact/javax.xml.ws/jaxws-api -->
<dependency>
    <groupId>javax.xml.ws</groupId>
    <artifactId>jaxws-api</artifactId>
    <version>2.1</version>
</dependency>
                



                <!--
                    https://www.baeldung.com/spring-apache-camel-tutorial
                    Essas duas dependencias he pra depois (porque nao
                    deu tempo agora) fazer com que o camel beans
                    utilize o spring como beans registry
                -->
                <dependency>
                  <groupId>org.apache.camel</groupId>
                  <artifactId>camel-stream</artifactId>
                  <version>${camel.version}</version>
                </dependency>
                <dependency>
                  <groupId>org.springframework</groupId>
                  <artifactId>spring-context</artifactId>
                  <version>${spring.version}</version>
                </dependency>

                
		<!-- Add your own dependencies here, if in compile scope, they are added 
			to the war -->

		<!-- for example -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-sql</artifactId>
			<version>${camel.version}</version>
		</dependency>

                <dependency>
                  <groupId>org.apache.camel</groupId>
                  <artifactId>camel-cxf</artifactId>
                  <version>${camel.version}</version>
                </dependency>
                
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-mail</artifactId>
			<version>${camel.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.camel/camel-jackson 
			To marshalling and unmuarshalling json -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jackson</artifactId>
                        <!-- <version>2.14.1</version> -->
			<version>2.24.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.camel/camel-jaxb To 
			marshalling and unmuarshalling xml -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jaxb</artifactId>
                        <!-- <version>2.13.0</version> -->
			<version>2.24.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-http</artifactId>
			<version>${camel.version}</version>			
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-restlet</artifactId>
			<version>${camel.version}</version>
		</dependency>

                <dependency>
                  <groupId>com.google.firebase</groupId>
                  <artifactId>firebase-admin</artifactId>
                  <version>6.8.1</version>
                </dependency>

                <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
                <dependency>
                  <groupId>org.postgresql</groupId>
                  <artifactId>postgresql</artifactId>
                  <version>42.2.8</version>
                </dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>camunda-bpm-nexus</id>
			<name>Camunda BPM Maven Repository</name>
			<url>https://app.camunda.com/nexus/content/groups/public</url>
		</repository>
	</repositories>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>

                  <plugin>
                    <groupId>org.apache.cxf</groupId>
                    <artifactId>cxf-codegen-plugin</artifactId>
                    <!-- <version>3.0.4</version> -->
                    <version>3.3.4</version>
                    <executions>
                      <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <configuration>
                          <sourceRoot>${basedir}/src/main/java</sourceRoot>
                          <wsdlOptions>
                            <wsdlOption>
                              <wsdl>${basedir}/src/main/resources/wsdl/CalcPrecoPrazo.asmx.xml</wsdl>
                            </wsdlOption>
                          </wsdlOptions>
                        </configuration>
                        <goals>
                          <goal>wsdl2java</goal>
                        </goals>
                      </execution>
                    </executions>
                  </plugin>

			<plugin>
				<!-- Allows to deploy the application using: mvn clean package antrun:run 
					Follow the instructions in build.properties.example to make it work! -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
                                <version>1.8</version>
                                				<executions>
					<execution>
						<id>undeployOnCleanPhase</id>
						<phase>clean</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<ant antfile="${basedir}/build.xml">
									<target name="undeploy.tomcat" />
								</ant>
							</tasks>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<tasks>
						<ant antfile="${basedir}/build.xml">
							<target name="copy.war.into.tomcat" />
						</ant>
					</tasks>
				</configuration>
			</plugin>

                        <!-- 
                             https://codehaus-cargo.github.io/cargo/Home.html 
                             https://codehaus-cargo.github.io/cargo/Deploying+to+a+running+container.html
                             Cargo supports deploying to an already running container. This feature is called Hot Deployment). You call it by using the (cargo:deploy) goal (e.g. mvn cargo:deploy).
                        -->
			<plugin>
			  <groupId>org.codehaus.cargo</groupId>
			  <artifactId>cargo-maven2-plugin</artifactId>
			  <version>${version.cargo.plugin}</version>
			  <configuration>
                             <!-- Container configuration -->
                             <container>
                               <containerId>tomcat9x</containerId>
                               <type>remote</type>
                             </container>

                             <!-- Configuration to use with the container (which will also configure the deployer) -->
			    <configuration>
			      <type>runtime</type>
			      <properties>
				<cargo.hostname>${tomcat-instance-hostname}</cargo.hostname>
				<cargo.servlet.port>${tomcat-instance-servlet-port}</cargo.servlet.port>
				<cargo.remote.username>${tomcat-instance-username}</cargo.remote.username>
				<cargo.remote.password>${tomcat-instance-password}</cargo.remote.password>
			      </properties>
			    </configuration>

                            <!-- Deployables configuration -->
                            <deployables>
                              <deployable>
                                <groupId>br.usp.sin5009</groupId>
                                <artifactId>camunda-servlet-spring-camel-war-agDeViagens</artifactId>
                                <type>war</type>
                                <!--
                                <properties>
                                  <context>optional root context</context>
                                </properties>
                                <pingURL>optional url to ping to know if deployable is done or not</pingURL>
                                <pingTimeout>optional timeout to ping (default 20000 milliseconds)</pingTimeout>
                                -->
                              </deployable>
                            </deployables>
			    </configuration>
			  </plugin>
                        
                        
			<!-- run this plugin with first: mvn clean tomcat7:deploy then: mvn clean 
				tomcat7:redeploy finally: mvn tomcat7:undeploy To use this plugin, add these 
				lines to your tomcat-users.xml: (inside the <tomcat-users>-tag) <role rolename="manager-script"/> 
				<user username="admin" password="admin" roles="manager-script"/> -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<url>http://localhost:8080/manager/text</url>
					<username>admin</username>
					<password>admin</password>
				</configuration>
			</plugin>
			<plugin>
				<!-- Usage: mvn jboss-as:deploy See also: https://docs.jboss.org/jbossas/7/plugins/maven/latest/examples/deployment-example.html -->
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>7.6.Final</version>
			</plugin>
			<plugin>
				<!-- Usage: mvn wildfly:deploy See also: https://docs.jboss.org/wildfly/plugins/maven/latest/examples/deployment-example.html -->
				<groupId>org.wildfly.plugins</groupId>
				<artifactId>wildfly-maven-plugin</artifactId>
				<version>1.0.2.Final</version>
			</plugin>
		</plugins>
	</build>
</project>
