#+Title: Camunda Anots
#+Subtitle:

* Introducao e Apresentacao deste material   
  Este texto foi construindo enquanto fazíamos o trabalho final da
  disciplina SIN5009. Ele serve como anotação e suporte para obter
  maior possibilidade de reproduzir o trabalho.

  Para isso anotamos aqui todos os comandos que utilizamos e acessos a
  webservices e demais anotações relevantes para referência posterior
  tanto nossa como também de outras pessoas que se interessarem.

  Os comandos são do linux, mas usando o bash da instalação do git
  para windows é possível utilizar os mesmos comandos no windows
  também.
  
* Download e Instalacao
** Ferramentas utilizadas foram:
  + Servidor bpm do camunda
    
    Url:

  + Modelador BPMN do camunda
    Url:

  + Eclipse IDE
    Url:

  + ESB Talend
    Url:

  + SOAPUI
    Url:

  + Maven
    Url:
        A máquina de trabalho deve ter java instalado e configurado.
  + curl
    A gente vai querer fazer chamadas a webservices e o curl é uma
    maneira mais prática de fazer isso utilizando a linha de comando
    Url:
    https://curl.haxx.se
    
    https://pt.wikipedia.org/wiki/CURL
    
** Diferencas e Semelhancas  entre o camunda e o bonita
   A primeira parte do trabalho foi feita no bonita e a segunda no
   camunda. Por isso vamos colocar nossas observacoes relativas as
   diferencas e semelhancas entre eles.
  
   Essas observações estão dentre da perspectiva de um usuário comum e não tipo um
   arquiteto java.

   + Utilizacao do Modelador(BPMN) e do Servidor (Diferenca)
     Sob a perspectiva do usuário, na próprio IDE do bonita é possível
     fazer tudo, ou seja, modelar e rodar o projeto no servidor. 
     Já com o camunda, o usuário tem que lidar com o servidor e com o
     modelador separadamente.
     Quem usar o bonita vai ter a IDE do bonita que é um eclipse
     customizado, mas quem for usar o camunda vai usar o eclise sem customização.

   + Tecnologia 
     Stack de tecnologias Java (Semelhantes)
     Os projetos do camunda usam ferramente de build maven/gradle do
     bonita é projeto do eclipse normal mesmo (Diferenca)

     (mais semelhancas e diferencas que a gente for percebendo....)

** Setup do Ambiente de Desenvolvimento 

   Abaixo segue comandos que declaram a localizacao das ferramentas na
   máquina de desenvolvimento, indicando os locais onde elas estao
   instaladas. Vc deve modificar de acordo com o lugar onde voce
   instalou elas na sua máquina. Fazendo isso, todos os demais
   comandos deste texto vao funcionar corretamente.
   
   
  #+NAME:  setup environment                   
  #+BEGIN_SRC shell :session s1 :results output :exports both
     export thisRepoDir=/home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda
     export CAMUNDA_BPM_PLATFORM_HOME=$thisRepoDir/tools/camunda_bpm
     export CAMUNDA_BPM_PLATFORM_DEPLOY_DIR=$CAMUNDA_BPM_PLATFORM_HOME/server/apache-tomcat-9.0.19/webapps

     export ECLIPSE_HOME=$thisRepoDir/tools/eclipse-jee-2019-09-R-linux-gtk-x86_64
     
     export M2_HOME=/home/wagner/wagnerdocri@gmail.com3/fzlbpms/fzlStudio/integrated/build/apache-maven-3.6.0/

     export ESB_HOME=$thisRepoDir/tools/talend/Runtime_ESBSE/container
     export ESB_DEPLOY_DIR=$ESB_HOME/deploy
     export ESB_CMD="$ESB_HOME/bin/client -r 7"
     
     export CAMUNDA_BPM_MODELER_HOME=$thisRepoDir/tools/camunda-modeler-3.3.5-linux-x64
     export SOAPUI_HOME=
     export VerLogsCmd="tail -f /home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda/tools/camunda_bpm/server/apache-tomcat-9.0.19/logs/catalina.out"
     export diretorioQueInicializaProcessoAoReceberArquivo=/home/wagner/sin5009InputFolder
  #+END_SRC

  #+RESULTS: setup environment
  
* Rodando o Camunda BPM Platform, Camunda Modeler e ESB (Talend)
** Rodando o camunda platform
 
   O comando abaixo roda a plataforma camunda 
   Sera aberta no navegador a seguinte url
   http://localhost:8080/camunda/app/admin/default/#/login
   
  #+NAME: $CAMUNDA_BPM_PLATFORM_HOME/start-camunda.sh
  #+BEGIN_SRC shell :session s1 :results output :exports both
     #Comando para startart o camunda
     $CAMUNDA_BPM_PLATFORM_HOME/start-camunda.sh &

     #use esse comando abaixo pra parar o camunda
     #$CAMUNDA_BPM_PLATFORM_HOME/shutdown-camunda.sh

     xterm -hold  -e "tail -f $CAMUNDA_BPM_PLATFORM_HOME/server/apache-tomcat-9.0.19/logs/catalina.out" &
  #+END_SRC

  #+RESULTS: $CAMUNDA_BPM_PLATFORM_HOME/start-camunda.sh
  : 
  : CAMUNDA_BPM_PLATFORM_HOME/server/apache-tomcat-9.0.19/logs/catalina.out"
  : [2] 23251
  : [wagner@Unknown SIN5009WithCamunda]$ [wagner@Unknown SIN5009WithCamunda]$ [wagner@Unknown SIN5009WithCamunda]$ [wagner@Unknown SIN5009WithCamunda]$ [3] 23252

** Rodando o camunda modeler
   #+NAME: $CAMUNDA_BPM_MODELER_HOME/camunda-modeler                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code      
      $CAMUNDA_BPM_MODELER_HOME/camunda-modeler &
   #+END_SRC

   #+RESULTS: $CAMUNDA_BPM_MODELER_HOME/camunda-modeler
   : 
   : ECLIPSE_HOME/eclipse
   : [1] 8373

** Rodando nosso ESB (Talend )

   #+NAME: rodando esb
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      cd $ESB_HOME && ./bin/start
      xterm -hold -e "tail -f $ESB_HOME/log/tesb.log" &
   #+END_SRC

   #+RESULTS: rodando esb
   : 
   : CAMUNDA_BPM_PLATFORM_HOME/start-camunda.sh
   : [wagner@Unknown container]$ [3] 2865

** Rodando o eclipse IDE
   #+NAME: rodando o eclipse IDE
   #+BEGIN_SRC shell :session s1 :results output :exports both
   $ECLIPSE_HOME/eclipse &
   #+END_SRC

* Acessando o Camunda BPM Platform, Camunda Modeler e ESB (Talend)
** Acessando o camunda platform   
   A gente vai precisar fazer acessos ao servicos do camunda bpm pra
   varias tarefas como fazer undeploy de processos, deploy etc...

   Os acessos ao servidor he feito utilizando os endpoints rest que
   ele fornece.
   
   Para acessar os endpoints vamos usar o comando curl
   
   Segue abaixo apenas alguns exemplos sobre como fazer isso. A gente
   utilizou esses exemplos pra fazer as interações com o servidor do
   camundo conforme as necessidades que tivemos durante o trabalho.
*** Fazendo undeploy de processos
   #+NAME: fazendo undeploy cascade true
   #+BEGIN_SRC shell :session s1 :results output :exports both
      echo "List deployments"
      deploymentId=690fdca5-0b39-11ea-8a74-7440bbfe2c2f
      echo $(curl -X "DELETE" --silent --show-error localhost:8080/engine-rest/deployment/$deploymentId?cascade=true)
      echo "----------------------------------------------------------------------"
      echo "."  
   #+END_SRC

   #+RESULTS: fazendo undeploy cascade true
   : List deployments
   : ECLIPSE_HOME/eclipse
   : [wagner@Unknown SIN5009WithCamunda]$
   : ----------------------------------------------------------------------
   : .

   A chamada rest acima realmente faz o undeploy dos processos
   entretanto o arquivo war continua no diretorio de deploy do
   servidor.

*** Fazendo undeploy do projeto war
   Pra fazer o undeploy do war basta dar o comando 
   
   mvn clean

   Fazer o undeploy do war com mvn clean nao faz o undeploy do
   processo no cockpit do camunda.

   Use o comando abaixo pra listar seus pacotes war no diretorio de
   deploy do servidor do camunda.
   #+NAME: ls deploy dir
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
            ls -l $CAMUNDA_BPM_PLATFORM_DEPLOY_DIR
   #+END_SRC

   #+RESULTS: ls deploy dir
   #+begin_example

   total 5100
   drwxr-x---.  5 wagner wagner    4096 nov 14 19:59 AgDeViagens
   -rw-rw-r--.  1 wagner wagner 5173874 nov 14 19:59 AgDeViagens.war
   drwxrwxr-x.  7 wagner wagner    4096 out 24 15:07 camunda
   drwxrwxr-x.  6 wagner wagner    4096 out 24 15:07 camunda-invoice
   drwxr-xr-x.  4 wagner wagner    4096 mai 22 09:24 camunda-welcome
   drwxr-x---. 14 wagner wagner    4096 out 24 15:07 docs
   drwxrwxr-x.  4 wagner wagner    4096 out 24 15:07 engine-rest
   drwxr-x---.  6 wagner wagner    4096 out 24 15:07 examples
   drwxrwxr-x.  4 wagner wagner    4096 out 24 15:07 h2
   drwxr-x---.  5 wagner wagner    4096 out 24 15:07 host-manager
   drwxr-x---.  5 wagner wagner    4096 out 24 15:07 manager
   drwxr-x---.  3 wagner wagner    4096 out 24 15:07 ROOT
   #+end_example

*** iniciando um processo
     Pra ler um pouco mais sobre como instanciar um processo fazendo
     uma chamada rest, acesse a url abaixo:

     https://docs.camunda.org/manual/7.7/reference/rest/process-definition/post-start-process-instance/

     Nesta url abaixo tem um comando do curl que inicia tambem um
     processo.
     https://docs.camunda.org/get-started/quick-start/deploy/
     
**** Iniciando um processo enviando uma mensagem de start

      https://docs.camunda.org/manual/develop/reference/rest/message/post-message/
      
      POST /message


      Iniciando o processo de agencia de viagens enviando uma msg de
      start para o processo

   #+NAME: iniciando processo                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
     #starts code     
     
      echo .      
      echo $(curl --silent -H "Content-Type: application/json" -X POST -d @starMsg_MsgDeSolicitacaoRecebida.json http://localhost:8080/engine-rest/message)
      echo 
      echo .
     
      #echo "Iniciando processo"
      #processDefinitionId=procIdCliente:1:fb3f24c6-0732-11ea-83ce-7440bbfe2c2f
      #echo .
      #echo $("http://localhost:8080/engine-rest/$processDefinitionId/start")
      #echo .
      #echo $(curl -X POST --fail --silent --show-error localhost:8080/engine-rest/$processDefinitionId/start)
      #echo .
      #echo $(curl --fail --silent --show-error -X POST localhost:8080/engine-rest/process-definition/idProcessCliente:2:092b3210-0192-11ea-b2fe-7440bbfe2c2f/start --data '{"businessKey"="5","canal_de_comunicacao"="email"})
      #echo .
      #echo $(curl --fail --silent --show-error localhost:8080/engine-rest/execution/count)
      #echo "----------------------------------------------------------------------"
      #echo "."
   #+END_SRC

   #+RESULTS: iniciando processo
   : 
   : [wagner@nsipc163 SIN5009WithCamunda]$ .
   : [{"resultType":"ProcessDefinition","execution":null,"processInstance":{"links":[],"id":"8db218cb-0a97-11ea-ae44-b88584fd06d6","definitionId":"e5845069-0a95-11ea-ae44-b88584fd06d6","businessKey":"789","caseInstanceId":null,"ended":false,"suspended":false,"tenantId":null}}]
   : 
   : .


   Iniciando o processo de Cliente

   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      echo .      
      echo $(curl --silent -H "Content-Type: application/json" -X POST -d @starMsg_MsgDeSolicitacaoRecebida.json http://localhost:8080/engine-rest/message)
      echo .
      echo .
   #+END_SRC


**** Quantos estao executando?
   https://docs.camunda.org/manual/7.5/reference/rest/execution/
   
   #+NAME: /executionx
   #+BEGIN_SRC shell :session s1 :results output :exports both
   #starts code
   echo "Get Executions"
   echo $(curl --fail --silent --show-error localhost:8080/engine-rest/execution)
   echo "----------------------------------------------------------------------\n"
   #+END_SRC

   #+RESULTS: /executionx
   : 
   : Get Executions
   : [{"id":"5e748850-fdd4-11e9-b303-7440bbfe2c2f",
   :   "processInstanceId":"5e748850-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},
   :  {"id":"5fc46010-fdd4-11e9-b303-7440bbfe2c2f","processInstanceId":"5fc46010-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},
   :  {"id":"5feca8d7-fdd4-11e9-b303-7440bbfe2c2f","processInstanceId":"5feca8d7-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},
   :  {"id":"5ffa3d9d-fdd4-11e9-b303-7440bbfe2c2f","processInstanceId":"5feca8d7-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},{"id":"6005132c-fdd4-11e9-b303-7440bbfe2c2f","processInstanceId":"6005132c-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},{"id":"600c665c-fdd4-11e9-b303-7440bbfe2c2f","processInstanceId":"600c665c-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},{"id":"601e8e12-fdd4-11e9-b303-7440bbfe2c2f","processInstanceId":"601e8e12-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},{"id":"6028a068-fdd4-11e9-b303-7440bbfe2c2f","processInstanceId":"601e8e12-fdd4-11e9-b303-7440bbfe2c2f","ended":false,"tenantId":null},{"id":"a806ae1a-04ab-11ea-a7ce-d1ba4f139da4","processInstanceId":"a806ae1a-04ab-11ea-a7ce-d1ba4f139da4","ended":false,"tenantId":null},{"id":"a80db302-04ab-11ea-a7ce-d1ba4f139da4","processInstanceId":"a806ae1a-04ab-11ea-a7ce-d1ba4f139da4","ended":false,"tenantId":null}]
   : ----------------------------------------------------------------------\n

**** Terminando um processo
     
     nao funcionando ainda...
   #+NAME: terminate process                   
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code      
         echo "Terminating process...."
         caseId=a806ae1a-04ab-11ea-a7ce-d1ba4f139da4
         echo $(curl -X POST --fail --silent --show-error localhost:8080/engine-rest/case-instance/{a806ae1a-04ab-11ea-a7ce-d1ba4f139da4}/terminate)
         echo "----------------------------------------------------------------------\n"

   #+END_SRC

   #+RESULTS: terminate process
   : 
   : Terminating process....
   : [wagner@localhost SIN5009WithCamunda]$ curl: (22) The requested URL returned error: 415
   : ----------------------------------------------------------------------\n

*** examinando uma instancia de processo
    A gente pode estar interessado em várias informacoes sobre uma
    instancia

    Por exemplo, para obter as variaveis de processo de uma instancia,
    podemos fazer o seguinte...
    
   #+NAME: obtendo variaveis da intancia de um processo                   
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      aProcessInstanceId=3dc4336e-0ba1-11ea-8d17-7440bbfe2c2f
      echo $(curl -X "GET" --silent --show-error -o respostasDaApiRestDoCamunda/processInstanceVariables.json localhost:8080/engine-rest/process-instance/$aProcessInstanceId/variables)
      
   #+END_SRC

   #+RESULTS: obtendo variaveis da intancia de um processo
   : 
   : [wagner@Unknown SIN5009WithCamunda]$

** Acesando o nosso esb 
    É possivel acessar o esb talend pelo menos de duas maneiras:

**** webconsole
     Usando o webconsole do karaf

     http://localhost:8181/system/console/bundles
    
     Usando webconsole no talend
     
     https://localhost:9001/system/console/bundles

** linha de comando do karaf
    
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      #cd $ESB_HOME && ./bin/stop
      #$ESB_CMD "feature:list | grep console"
      #$ESB_CMD "feature:list | grep camel"
      #$ESB_CMD "camel:context-list"
      #$ESB_CMD "camel:endpoint-list"

   #+END_SRC

**** Iniciando o processo
     
     
   #+NAME: Iniciando o processo
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      echo $(curl localhost:8080/engine-rest/
   #+END_SRC

* Instalando (Deploy) os artefatos de software para rodar o processo
** Instalando no esb dependencias necessarias pra rodar nossos servicos

      #+NAME:  installnig component                   
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      #no talend nao precisa
      #https://camel.apache.org/components/latest/jasypt.html
      cd $ESB_CMD feature:install camel-jasypt
   #+END_SRC

** Instalando servicos no barramento de servicos
   Agora que a gente ligou nossos servidores falta instalar ainda o que
   vamos rodar neles. Por exemplo, falta instalar os processos e os
   servicos no barramento de servicos.

*** Instalando os webservices no nosso barramento de servicos
    
    Caso tenha algum servico no barramento, vamos remover todos pra
    comecar do zero.

    Remover os servicos do barramento significa apenas apagar os
    artefatos na pasta deploy
   #+NAME:  undeploy all                   
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      rm $ESB_HOME/deploy/*
   #+END_SRC

   #+RESULTS: undeploy all
   : 
   : rm: nÃ£o foi possÃ­vel remover '/home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009NonBpmnEngineArtifacts/talend/Runtime_ESBSE/container/deploy/*': No such file or directory


    Fazendo deploy dos servicos

   #+NAME: instalando servicos no barramento                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      #ls -l $diretorioDeProjetos
      #cp -f $diretorioDeProjetos/UspTimerExample_CamelBlueprintCxt.xml $ESB_HOME/deploy
      cp -f $diretorioDeProjetos/UspAgenciaViagens_CamelBLueprintCtx.xml $ESB_HOME/deploy
      #cp -f $diretorioDeProjetos/cxf-blueprint-camel-example/target/cxf-blueprint-camel-example-1.0-SNAPSHOT.jar $ESB_HOME/deploy
      

      #cxf-blueprint-camel-example-1.0-SNAPSHOT.jar
      #osgi:install -s mvn:com.capgemini.example/cxf-blueprint-camel-example/1.0-SNAPSHOT
      
   #+END_SRC

   #+RESULTS: instalando servicos no barramento


   Aqui nos simulamos a criacao o agente de viagens que recebeu o
   cliente na agencia, preencheu um arquivo e salvou na pasta
   especifica que sempre qdo um arquivo chega nessa pasta o processo
   sera iniciado.
   
   #+NAME:  simula salvar arquivo de solicitacao na pastaDeSolicitacaoDeClientes                   
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      
      echo "arquivo de solicitacao 1" > $PastaDeSolicitacaoDeClientes/ArqDeSol1.txt
      ls -l $PastaDeSolicitacaoDeClientes
   #+END_SRC

   #+RESULTS: simula salvar arquivo de solicitacao na pastaDeSolicitacaoDeClientes
   : 
   : [wagner@nsi_pc_149_3 pastaDeSolicitacaoDeClientes]$ [wagner@nsi_pc_149_3 pastaDeSolicitacaoDeClientes]$ total 4
   : -rw-rw-r--. 1 wagner wagner 25 out 24 09:37 ArqDeSol1.txt

*** Conferindos se esta tudo pronto pra rodar o processo
**** Conferindo karaf (nosso esb)
     
     verificando se nossos bundles estao instalados e ativos

     #+NAME:Conferindos se esta tudo pronto pra rodar
     #+BEGIN_SRC shell :session s1 :results output :exports both
        #starts code
        #$ESB_CMD "bundle:list"
        #$ESB_CMD "camel:list-context"
        $ESB_CMD "camel:context-stop CamelContextName--RecebeSolicitacaoDoCliente"
     #+END_SRC

     #+RESULTS: Conferindos se esta tudo pronto pra rodar
     : 
     : CAMUNDA_BPM_MODELER_HOME/camunda-modeler
     : [wagner@Unknown apache-karaf-4.2.6]$ Logging in as karaf
     : [31mCommand not found: [0m[31;1mcamel:list-context[0m



*** rest operations
**** rest with curl
     
   #+NAME:  curl
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      curl -v -H "Accept:application/json" http://localhost:8080/engine-rest/case-instance/count       
      #curl --request GET -L -v  http://localhost:8080/engine-rest/case-instance/count
   #+END_SRC

   #+RESULTS: curl


**** deploy
   https://docs.camunda.org/manual/7.7/reference/rest/deployment/post-deployment/  
   #+NAME:  deploy                   
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      
   #+END_SRC

*** urls references
    
**** Página de boas vindas que mostra as appps do camunda
     localhost:8080/camunda-welcome/index.html

**** app cockpit
     localhost:8080/camunda/app/cockpit/


**** Admin    
     Pra entender melhor o app admin acesse:
     https://docs.camunda.org/manual/7.11/webapps/admin/
     
     http://localhost:8080/camunda/app/admin/default/#/

**** Login:      
     http://localhost:8080/camunda/app/welcome/default/#!/login

    


*** Getting started
    
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      cd $projdir
      mvn package

   #+END_SRC

   
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      
   #+END_SRC

** Usando Camunda Modeler e rodando um processo e integrando ele com nossa logica de negocio
   
* Criando o processo e rodando 

  Visão geral como trabalhar com o camunda.

  Para criar um projeto, use o maven normalmente.
  mvn archetype:generate

  Escolha um dos archetypes do camunda 

  Edite o process.bpmn que está nos resources do seu projeto

  Com o camunda bpm server instalado, agora pode rodar o projeto.
  Enquanto ferramentas bpms fornecem um botão de play, no camunda, a
  gente roda o projeto com o comando do maven. Rodar o projeto
  significa preparar e compilar o projeto e finalmente o deploy.

  O comando abaixo faz tudo isso.
   #+NAME: mvn clean package antrun:copy.war.into.tomcat
   #+BEGIN_SRC shell :session s1 :results output :exports both
     cd diretorio do seu projeto
     mvn clean package antrun:run
   #+END_SRC

* Inicializacao do processo

  O processo pode ser iniciado programaticamente ou via formulário
  Segundo nossos casos de uso para este trabalho um cliente pode

  Lembrando que para um processo iniciar, ou seja, para que a agencia
  de viagens possa ofertar os pacotes de viagens para o cliente, é
  necessário que haja as seguintes informaçoes, no mínimo:
  
  Data de início e fim da viagem
  Locais onde o cliente quer passear
  Vlr estimado que ele pretende gastar
  
  Essar informações vão virar variáveis do processo no momento da
  instanciacao do processo.
  
  

  + Chegar na agencia pessoalmente
    Neste caso o processo tem que ser inicializado por um funcionario
    da a gencia de viagens.
    
    A funcionalidade prevista que pode ser exercitada seria o
    funcionário salvar um arquivo em um diretório especifico e um dos
    nossos serviços detecta a "chegada" desse arquivo e usa dados
    desse arquivo pra estartar o processo.

    Para exerciciar isso é só usar o comando abaixo pra colocar/salvar
    o arquivo na pasta específica.

    
   #+NAME: colocando arquivo payloadMsg_startProcess_Cliente.json na pasta especifica                    
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      cp payloadMsg_startProcess_Cliente.json $diretorioQueInicializaProcessoAoReceberArquivo
   #+END_SRC

   #+RESULTS: colocando arquivo payloadMsg_startProcess_Cliente.json na pasta especifica

   segue abaixo o conteudo do arquivo...

   #+INCLUDE: payloadMsg_startProcess_Cliente.json :src json
  
    Outra funcionalidade que pode ser exercitada seria esse mesmo
    funcionario da agencia de viagens entrar em um formulário do
    camunda e preencher os dados que vão ser utilizados para estartar
    o processo.

    
  + 

* Nossos webservices
** nossos rest services
   
   #+NAME: acess nosso rest service1                   
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      curl -X POST localhost:8090/processoCliente
   #+END_SRC
* referencias
  https://docs.camunda.org/get-started/quick-start/

* Desligando todos os tools
  
   #+NAME: Desligando todos os tools    
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      #use esse comando abaixo pra parar o camunda
      $CAMUNDA_BPM_PLATFORM_HOME/shutdown-camunda.sh

      #O Camunda modeler he so fechar pela interface grafica dele

      #Desligando ESB Talend
      cd $ESB_HOME && ./bin/stop
   #+END_SRC

   #+RESULTS: Desligando todos os tools
   #+begin_example

   CAMUNDA_BPM_PLATFORM_HOME/server/apache-tomcat-9.0.19/logs/catalina.out"  (wd: ~/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda)
   (wd agora: ~/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda/tools/talend/Runtime_ESBSE/container)
   Using CATALINA_BASE:   /home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda/tools/camunda_bpm/server/apache-tomcat-9.0.19
   Using CATALINA_HOME:   /home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda/tools/camunda_bpm/server/apache-tomcat-9.0.19
   Using CATALINA_TMPDIR: /home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda/tools/camunda_bpm/server/apache-tomcat-9.0.19/temp
   Using JRE_HOME:        /home/wagner/PROGSATIVOS/jdk1.8.0_191
   Using CLASSPATH:       /home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda/tools/camunda_bpm/server/apache-tomcat-9.0.19/bin/bootstrap.jar:/home/wagner/wagnerdocri@gmail.com3/envs/env-dev/sources/SIN5009WithCamunda/tools/camunda_bpm/server/apache-tomcat-9.0.19/bin/tomcat-juli.jar
   nov 03, 2019 1:46:58 AM org.apache.catalina.startup.Catalina stopServer
   GRAVE: Could not contact [localhost:8005] (base port [8005] and offset [0]). Tomcat may not be running.
   nov 03, 2019 1:46:58 AM org.apache.catalina.startup.Catalina stopServer
   GRAVE: Error stopping Catalina
   java.net.ConnectException: Connection refused (Connection refused)
           at java.net.PlainSocketImpl.socketConnect(Native Method)
           at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
           at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
           at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
           at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
           at java.net.Socket.connect(Socket.java:589)
           at java.net.Socket.connect(Socket.java:538)
   (Socket.java:434)
   (Socket.java:211)
           at org.apache.catalina.startup.Catalina.stopServer(Catalina.java:513)
           at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.lang.reflect.Method.invoke(Method.java:498)
           at org.apache.catalina.startup.Bootstrap.stopServer(Bootstrap.java:403)
           at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:497)
   #+end_example
